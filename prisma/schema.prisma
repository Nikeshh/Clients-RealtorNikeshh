datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Client {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  email       String
  phone       String
  status      String   @default("Active")
  lastContact DateTime @default(now())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  requirements     ClientRequirements?
  interactions     Interaction[]
  sharedProperties SharedProperty[]

  @@index([name])
  @@index([email])
}

model ClientRequirements {
  id                    String   @id @default(auto()) @map("_id") @db.ObjectId
  clientId             String   @unique @db.ObjectId
  propertyType         String
  budgetMin            Float
  budgetMax            Float
  bedrooms             Int?
  bathrooms            Int?
  preferredLocations   String[]
  additionalRequirements String?

  client               Client   @relation(fields: [clientId], references: [id], onDelete: Cascade)
}

model Property {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  address     String
  price       Float
  type        String
  bedrooms    Int?
  bathrooms   Int?
  area        Float
  status      String   @default("Available")
  description String?
  features    String[]
  images      String[]
  source      String
  location    String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  sharedWith  SharedProperty[]
}

model SharedProperty {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  clientId    String   @db.ObjectId
  propertyId  String   @db.ObjectId
  status      String   @default("Shared")
  sharedDate  DateTime @default(now())

  client      Client    @relation(fields: [clientId], references: [id], onDelete: Cascade)
  property    Property  @relation(fields: [propertyId], references: [id], onDelete: Cascade)
}

model Interaction {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  clientId    String   @db.ObjectId
  type        String
  date        DateTime @default(now())
  description String
  notes       String?

  client      Client   @relation(fields: [clientId], references: [id], onDelete: Cascade)
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
} 