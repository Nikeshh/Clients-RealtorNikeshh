datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Client {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  email       String
  phone       String
  status      String   @default("Active")
  notes       String?
  pinned      Boolean  @default(false)
  lastContact DateTime @default(now())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  stages      Stage[]
  commissions Commission[]
  transactions Transaction[]
  documentRequests DocumentRequest[]
  meetings    Meeting[]
  checklist   ClientChecklist[]
  interactions Interaction[]

  @@index([name])
  @@index([email])
  @@index([pinned])
}

model Stage {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  clientId    String   @db.ObjectId
  title       String
  description String?
  status      String   @default("ACTIVE") // ACTIVE, COMPLETED, CANCELLED
  startDate   DateTime @default(now())
  endDate     DateTime?
  order       Int      // To maintain stage sequence
  
  // Relations
  client      Client   @relation(fields: [clientId], references: [id], onDelete: Cascade)
  processes   Process[]
  requirements ClientRequirement[]
  checklist   StageChecklist[]
  documents   Document[]
  sharedProperties SharedProperty[]
  interactions Interaction[]
}

model Process {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  stageId     String   @db.ObjectId
  title       String
  description String?
  type        String   // DOCUMENT, EMAIL, MEETING, TASK
  status      String   // PENDING, IN_PROGRESS, COMPLETED, FAILED
  dueDate     DateTime?
  completedAt DateTime?
  notes       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  stage       Stage    @relation(fields: [stageId], references: [id], onDelete: Cascade)
  tasks       ProcessTask[]
}

model ProcessTask {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  processId     String   @db.ObjectId
  type          String   // EMAIL, DOCUMENT_REQUEST, CALENDAR_INVITE
  status        String   // PENDING, COMPLETED, FAILED
  completedAt   DateTime?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  process       Process @relation(fields: [processId], references: [id], onDelete: Cascade)
}

model ClientRequirement {
  id                    String   @id @default(auto()) @map("_id") @db.ObjectId
  stageId              String   @db.ObjectId
  name                 String
  type                 String   @default("PURCHASE")
  propertyType         String
  budgetMin            Float
  budgetMax            Float
  bedrooms             Int?
  bathrooms            Int?
  preferredLocations   String[]
  additionalRequirements String?
  status               String   @default("Active")
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt

  stage               Stage    @relation(fields: [stageId], references: [id], onDelete: Cascade)
  gatheredProperties   GatheredProperty[]
  interactions         Interaction[]
  commissions          Commission[]
  
  // Add these relation fields
  rentalPreferences    RentalPreferences?
  purchasePreferences  PurchasePreferences?
  checklist           RequirementChecklist?
}

model GatheredProperty {
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  requirementId   String   @db.ObjectId
  propertyId      String   @db.ObjectId
  notes           String?
  status          String   @default("Pending")
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  requirement     ClientRequirement @relation(fields: [requirementId], references: [id], onDelete: Cascade)
  property        Property          @relation(fields: [propertyId], references: [id])
}

model Property {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  address     String
  price       Float
  type        String   // House, Apartment, Condo, Land
  listingType String   @default("SALE")  // SALE or RENTAL
  bedrooms    Int?
  bathrooms   Int?
  area        Float
  status      String   @default("Available")
  description String?
  features    String[]
  images      String[]
  source      String
  location    String
  yearBuilt   Int?     // For property age matching
  link        String?  // Add this line
  
  // Rental specific fields
  furnished   Boolean? // For rental properties
  petsAllowed Boolean? // For rental properties
  leaseTerm   String?  // Short-term, Long-term
  
  // Purchase specific fields
  lotSize     Float?   // For land/houses
  basement    Boolean? @default(false)
  garage      Boolean? @default(false)
  parkingSpaces Int?
  propertyStyle String? // Modern, Traditional, Contemporary, etc.

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  sharedWith         SharedProperty[]
  gatheredProperties GatheredProperty[]

  commissions   Commission[]
  transactions  Transaction[]

  @@index([type])
  @@index([listingType])
  @@index([status])
  @@index([location])
}

model SharedProperty {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  stageId     String   @db.ObjectId
  propertyId  String   @db.ObjectId
  status      String   @default("Shared")
  sharedDate  DateTime @default(now())

  stage       Stage    @relation(fields: [stageId], references: [id], onDelete: Cascade)
  property    Property  @relation(fields: [propertyId], references: [id], onDelete: Cascade)
}

model Interaction {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  clientId      String   @db.ObjectId
  type          String
  description   String
  notes         String?
  date          DateTime @default(now())

  client        Client   @relation(fields: [clientId], references: [id], onDelete: Cascade)
  stage         Stage?   @relation(fields: [stageId], references: [id])
  stageId       String?  @db.ObjectId
  requirement   ClientRequirement? @relation(fields: [requirementId], references: [id])
  requirementId String? @db.ObjectId
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model RentalPreferences {
  id                  String   @id @default(auto()) @map("_id") @db.ObjectId
  requirementId       String   @db.ObjectId @unique
  leaseTerm           String
  furnished           Boolean  @default(false)
  petsAllowed         Boolean  @default(false)
  maxRentalBudget     Float
  preferredMoveInDate DateTime?
  requirement         ClientRequirement @relation(fields: [requirementId], references: [id], onDelete: Cascade)
}

model PurchasePreferences {
  id                  String   @id @default(auto()) @map("_id") @db.ObjectId
  requirementId       String   @db.ObjectId @unique
  propertyAge         String?
  preferredStyle      String?
  parking             Int?
  lotSize             Float?
  basement            Boolean  @default(false)
  garage              Boolean  @default(false)
  requirement         ClientRequirement @relation(fields: [requirementId], references: [id], onDelete: Cascade)
}

model RequirementChecklist {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  requirementId String   @db.ObjectId @unique
  completed     Boolean  @default(false)
  notes         String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  requirement   ClientRequirement @relation(fields: [requirementId], references: [id], onDelete: Cascade)
}

model ClientChecklist {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  clientId    String   @db.ObjectId
  text        String
  completed   Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  client      Client   @relation(fields: [clientId], references: [id], onDelete: Cascade)
}

enum TransactionType {
  INCOME
  EXPENSE
}

enum CommissionStatus {
  PENDING
  RECEIVED
  OVERDUE
}

model Transaction {
  id          String         @id @default(auto()) @map("_id") @db.ObjectId
  date        DateTime
  type        TransactionType
  amount      Float
  description String
  category    String
  notes       String?
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  
  // Relations
  clientId    String?        @db.ObjectId
  client      Client?        @relation(fields: [clientId], references: [id])
  propertyId  String?        @db.ObjectId
  property    Property?      @relation(fields: [propertyId], references: [id])
  commissionId String?       @db.ObjectId
  commission  Commission?    @relation(fields: [commissionId], references: [id])
}

model Commission {
  id            String          @id @default(auto()) @map("_id") @db.ObjectId
  amount        Float
  percentage    Float
  status        CommissionStatus
  dueDate       DateTime
  receivedDate  DateTime?
  notes         String?
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt

  // Relations
  propertyId    String          @db.ObjectId
  property      Property        @relation(fields: [propertyId], references: [id])
  clientId      String          @db.ObjectId
  client        Client          @relation(fields: [clientId], references: [id])
  requirementId String?         @db.ObjectId
  requirement   ClientRequirement? @relation(fields: [requirementId], references: [id])
  transactions  Transaction[]
}

model FinancialGoal {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  title         String
  targetAmount  Float
  currentAmount Float     @default(0)
  startDate     DateTime
  endDate       DateTime
  achieved      Boolean   @default(false)
  notes         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Document {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  name       String
  url        String
  type       String
  uploadedAt DateTime @default(now())
  stageId    String   @db.ObjectId
  stage      Stage    @relation(fields: [stageId], references: [id], onDelete: Cascade)
}

model StageChecklist {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  stageId     String   @db.ObjectId
  text        String
  completed   Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  stage       Stage    @relation(fields: [stageId], references: [id], onDelete: Cascade)
}

model EmailQueue {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  to          String
  subject     String
  content     String
  status      String   // PENDING, SENT, FAILED
  sentAt      DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model DocumentRequest {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  clientId    String   @db.ObjectId
  title       String
  description String
  status      String   // PENDING, COMPLETED, FAILED
  dueDate     DateTime?
  completedAt DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  client      Client   @relation(fields: [clientId], references: [id], onDelete: Cascade)
}

model Meeting {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  clientId      String   @db.ObjectId
  title         String
  description   String
  status        String   // PENDING, SCHEDULED, COMPLETED, CANCELLED
  suggestedDate DateTime?
  scheduledDate DateTime?
  completedAt   DateTime?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  client        Client   @relation(fields: [clientId], references: [id], onDelete: Cascade)
}